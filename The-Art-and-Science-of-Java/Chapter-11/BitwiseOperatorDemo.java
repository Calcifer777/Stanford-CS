
import acm.program.*;

import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.*;
import acm.gui.*;

public class BitwiseOperatorDemo extends Program implements ItemListener {
	
	/** Initializes the components and the action listeners */
	public void init() {

		/* Setting the appropriate size of the applet window
		 * and the tableLayout */
		setSize (400, 150);
		layout = new TableLayout(3, 9); 
		setLayout(layout);

		/* Creating the 3 ArrayLists for each of the integers */
		createBits(bit1);
		createBits(bit2);
		createBits(result);
		
		addComponents();
		
		/* Adding the action listeners to the JButtons, and an 
		 * item change listener to the operator chooser */
		addActionListeners();
		operatorChooser.addItemListener(this);
		
	}

	
	/** Adds the Jbuttons to the corresponding arrayList 
	 *@param array The array - of length 8 - to which the JButtons are added */
	private void createBits(ArrayList<JButton> array) {
		
		for (int i = 1 ; i <= 8 ; i++ ) {
			array.add(new JButton("0"));
		}
		
	}
	
	/** Adds the components to the table layout */
	private void addComponents() {
		
		initOperatorChooser();
		add(new JLabel(" "));
		addBits(bit1);
		add(operatorChooser);
		addBits(bit2);
		add(new JLabel(" "));
		addBits(result);
	}
	
	/** Initializes and adds the JComboBox for selecting the bit operators*/
	private void initOperatorChooser() {
		
		operatorChooser = new JComboBox<String>();
		operatorChooser.addItem("&");
		operatorChooser.addItem("^");
		operatorChooser.addItem("|");
		operatorChooser.addItem("~");	
		
		operatorChooser.setEditable(false);
		
	}
	
	/** Adds the bits buttons 
	 * @param n The number of buttons to be added*/
	private void addBits(ArrayList<JButton> array) {
		
		for (int i = 0 ; i < array.size() ; i ++) {
			
			add(array.get(i));
			
		}
		
	}

	/** Called whenever a button is pressed */
	public void actionPerformed(ActionEvent e) {
		
		changeBit(e);
		
		/* Returns the selected operator*/
		operator = operatorChooser.getSelectedItem().toString();
		
		displayResult(bit1, bit2, operator);
		
	}
	
	/** Changes the bit selected 
	 * @param e The actionEvent generated by the mouse click 
	 * on a bit1 or bit2 button*/
	private void changeBit(ActionEvent e){
		
		for (int i = 0 ; i <= 7 ; i ++) {
			
			if (e.getSource().equals(bit1.get(i))) {
				selection=bit1.get(i); break;
			} else if (e.getSource().equals(bit2.get(i))) {
				selection=bit2.get(i); break;
			} else if (e.getSource().equals(operatorChooser)) {
				displayResult(bit1, bit2, operator);
			} else {
				selection=null;
			}
	
		}
		
		if (selection != null && selection.getText().equals("0")) {
			selection.setText("1");
		} else if (selection != null && selection.getText().equals("1")) {
			selection.setText("0");
		}
		
	}
	
	/** Called whenever the selected operator is changed 
	 * */
	public void itemStateChanged(ItemEvent e) {
		operator = operatorChooser.getSelectedItem().toString();
		displayResult(bit1, bit2, operator);
	}		
		
	/** Displays the result of the operation of bit1-[operator]-bit2 
	 * */
	/**
	 * @param bit1	The ArrayList containing the first integer
	 * @param bit2	The ArrayList containing the second integer
	 * @param str	The bit operator
	 */
	private void displayResult(ArrayList<JButton> bit1, ArrayList<JButton> bit2, String str) {
		
		for (int i = 0; i < 8 ; i++ ) {
			
			String b1 = bit1.get(i).getText();
			String b2 = bit2.get(i).getText();
			
			if (str=="&") result.get(i).setText( (b1=="1" && b2 == "1")?"1":"0" );
			if (str=="|") result.get(i).setText( (b1=="1" || b2 == "1")?"1":"0" );
			if (str=="^") result.get(i).setText( (b1 != b2)?"1":"0" );
			if (str=="~") result.get(i).setText( (b1 == "0")?"1":"0" );
		}

		
		
	}
	
	/* Private Instance variables */
	
	JComboBox<String> operatorChooser;
	JComponent bits;
	TableLayout layout;
	String operator ="&"; 
	ArrayList<JButton> bit1 = new ArrayList<JButton>();
	ArrayList<JButton> bit2 = new ArrayList<JButton>();
	ArrayList<JButton> result = new ArrayList<JButton>();
	JButton selection;
	
}
